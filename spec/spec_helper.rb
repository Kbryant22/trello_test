ENV["RAILS_ENV"] ||= 'test'
require File.expand_path("../../config/environment", __FILE__)
require 'airborne'
require 'capybara'
require 'rspec-steps/monkeypatching'
require 'capybara-screenshot/rspec'
require 'rspec/retry'
require 'airborne'
require 'nokogiri'
require 'open-uri'
require 'minitest/unit'
require 'test-unit'

require File.expand_path('../config/trello_env/trello_env.rb', File.dirname(__FILE__))
require 'rspec/rails'
require 'capybara/rspec'


Dir[Rails.root.join("spec/support/**/*.rb")].each { |f| require f }
# Capybara.javascript_driver = :firefox
Capybara.javascript_driver = :selenium
Capybara.default_driver = :webkit
Capybara.ignore_hidden_elements = true
Capybara.default_max_wait_time = 30

Capybara::Webkit.configure do |config|

  # Allow pages to make requests to any URL without issuing a warning.
  config.allow_unknown_urls
  config.ignore_ssl_errors
  config.allow_url $TRELLO_ALLOW_URL 
  config.allow_url("trello.com")

  # debug
  config.debug = false

  # Timeout if requests take longer than 30 seconds
  config.timeout = 30

end

# firefox (not working for versions > 45)
Capybara.register_driver :firefox do |app|

  profile = Selenium::WebDriver::Firefox::Profile.new
  profile['browser.download.dir'] = DownloadHelper::PATH.to_s

  # Suppress "open with" dialog
  profile['browser.helperApps.neverAsk.saveToDisk']= 'text/csv, text/html, application/vnd.ms-excel, application/msword'
  Capybara::Selenium::Driver.new(app, :browser => :firefox, :profile => profile, marionette: true)

end

# chrome
Capybara.register_driver :selenium do |app|

  profile = Selenium::WebDriver::Chrome::Profile.new
  profile["download.default_directory"] = DownloadHelper::PATH.to_s
  profile["download.prompt_for_download"] = false
  profile['browser.download.folderList'] = 2

  # Suppress "open with" dialog
  profile['browser.helperApps.neverAsk.saveToDisk']= 'text/csv, text/html, application/vnd.ms-excel, application/msword'
  Capybara::Selenium::Driver.new(app, :browser => :chrome, :profile => profile, args: ["--verbose", "--window-size=1920,1080"])

end

# mobile emulation
Capybara.register_driver :mobile do |app|

  args = []
  args << "--user-agent='Mozilla/5.0 (Linux; Android 7.0; ASUS Zenfone 3 Build/NRD90M.WW_user_5.17.44.68)_20180111) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/43.0.2357.65 Mobile Safari/537.36'"
  Capybara::Selenium::Driver.new(app, :browser => :chrome, :args => args)

end


# This file was generated by the `rails generate rspec:install` command. Conventionally, all
# specs live under a `spec` directory, which RSpec adds to the `$LOAD_PATH`.
# The generated `.rspec` file contains `--require spec_helper` which will cause
# this file to always be loaded, without a need to explicitly require it in any
# files.
#
# Given that it is always loaded, you are encouraged to keep this file as
# light-weight as possible. Requiring heavyweight dependencies from this file
# will add to the boot time of your test suite on EVERY test run, even for an
# individual file that may not need all of that loaded. Instead, consider making
# a separate helper file that requires the additional dependencies and performs
# the additional setup, and require it from the spec files that actually need
# it.
#
# See http://rubydoc.info/gems/rspec-core/RSpec/Core/Configuration
RSpec.configure do |config|

  config.include ShowMeTheCookies, :type => :feature


  config.include Capybara::DSL
  config.filter_run :focus
  config.run_all_when_everything_filtered = true
  config.filter_run_excluding :ignore
  config.profile_examples = true


  # rspec-retry
  config.verbose_retry = true
  config.display_try_failure_messages = true
  config.default_sleep_interval = 5
  config.default_retry_count = 2


  # config.around :each, :js do |ex|
  #   ex.run_with_retry retry: 2
  # end

end

# Automatically take a screenshot of every failing test and save it into ./tmp/capybara
Capybara::Screenshot.prune_strategy = :keep_last_run
Capybara::Screenshot::RSpec::REPORTERS['RSpec::Core::Formatters::HtmlFormatter'] =
  Capybara::Screenshot::RSpec::HtmlEmbedReporter
Capybara::Screenshot.register_filename_prefix_formatter(:rspec) do |example|
  "screenshot_#{example.description.gsub(' ', '-').gsub(/^.*\/spec\//,'')}"
end

Capybara::Screenshot.register_driver(:selenium) do |driver, path|
  driver.browser.save_screenshot path
end

Capybara.asset_host = 'https://trello.com'

### Airborne ###
# Airborne config is defined in dt_env.rb
# if your test requires a different config, set it in the test file
Airborne.configure do |config|
  config.base_url = $TRELLO_SECURE_BASE_URL
  config.headers = { 'Authorization' => "#{$TOKEN}" }
end
  # rspec-expectations config goes here. You can use an alternate
  # assertion/expectation library such as wrong or the stdlib/minitest
  # assertions if you prefer.
  #config.expect_with :rspec do |expectations|
    # This option will default to `true` in RSpec 4. It makes the `description`
    # and `failure_message` of custom matchers include text for helper methods
    # defined using `chain`, e.g.:
    #     be_bigger_than(2).and_smaller_than(4).description
    #     # => "be bigger than 2 and smaller than 4"
    # ...rather than:
    #     # => "be bigger than 2"
   #expectations.include_chain_clauses_in_custom_matcher_descriptions = true
  #end

  # rspec-mocks config goes here. You can use an alternate test double
  # library (such as bogus or mocha) by changing the `mock_with` option here.
 # config.mock_with :rspec do |mocks|
    # Prevents you from mocking or stubbing a method that does not exist on
    # a real object. This is generally recommended, and will default to
    # `true` in RSpec 4.
   ###config.shared_context_metadata_behavior = :apply_to_host_groups

# The settings below are suggested to provide a good initial experience
# with RSpec, but feel free to customize to your heart's content.
=begin
  # This allows you to limit a spec run to individual examples or groups
  # you care about by tagging them with `:focus` metadata. When nothing
  # is tagged with `:focus`, all examples get run. RSpec also provides
  # aliases for `it`, `describe`, and `context` that include `:focus`
  # metadata: `fit`, `fdescribe` and `fcontext`, respectively.
  config.filter_run_when_matching :focus

  # Allows RSpec to persist some state between runs in order to support
  # the `--only-failures` and `--next-failure` CLI options. We recommend
  # you configure your source control system to ignore this file.
  config.example_status_persistence_file_path = "spec/examples.txt"

  # Limits the available syntax to the non-monkey patched syntax that is
  # recommended. For more details, see:
  #   - http://rspec.info/blog/2012/06/rspecs-new-expectation-syntax/
  #   - http://www.teaisaweso.me/blog/2013/05/27/rspecs-new-message-expectation-syntax/
  #   - http://rspec.info/blog/2014/05/notable-changes-in-rspec-3/#zero-monkey-patching-mode
  config.disable_monkey_patching!

  # Many RSpec users commonly either run the entire suite or an individual
  # file, and it's useful to allow more verbose output when running an
  # individual spec file.
  if config.files_to_run.one?
    # Use the documentation formatter for detailed output,
    # unless a formatter has already been configured
    # (e.g. via a command-line flag).
    config.default_formatter = "doc"
  end

  # Print the 10 slowest examples and example groups at the
  # end of the spec run, to help surface which specs are running
  # particularly slow.
  config.profile_examples = 10

  # Run specs in random order to surface order dependencies. If you find an
  # order dependency and want to debug it, you can fix the order by providing
  # the seed, which is printed after each run.
  #     --seed 1234
  config.order = :random

  # Seed global randomization in this process using the `--seed` CLI option.
  # Setting this allows you to use `--seed` to deterministically reproduce
  # test failures related to randomization by passing the same `--seed` value
  # as the one that triggered the failure.
  Kernel.srand config.seed
=end
#end
